
import display.loading.Run.Loading;

import java.util.Random;

import display.windowNext;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Tooltip;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.event.ActionEvent;
import javafx.scene.layout.*;
import javafx.scene.image.*;
import java.io.*;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.control.*;
import javafx.scene.paint.*;

public class Main extends Application {

    private static Scene sceneBtn;
    private static Random randApplication = new Random();
    private static boolean canProceed = true;

    private boolean running = false;
    private boolean paused = false;
    private int fps = 60;
    private int frameCount = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public static void main(String[] args) {
        try {
            launch(args);
        } catch (Exception e) {

            Alert alert = new Alert(AlertType.ERROR);
            alert.setTitle("Error Dialog");
            alert.setHeaderText("Look, an Exception");
            alert.showAndWait();
        }
    }

    @Override
    public void start(Stage primaryStage) {

        try {
            Parent root = FXMLLoader.load(getClass().getResource("./display/Mxml.fxml"));

            new windowNext(primaryStage, 1200, 720, Consts.TITLE);

            primaryStage.setResizable(false);
            primaryStage.initStyle(StageStyle.UNDECORATED);

            // HBox button

            Scene scene = new Scene(root);
            scene.getStylesheets().add(getClass().getResource("./CSS/styles.css").toExternalForm());

            Tooltip tipTextBtn = new Tooltip("NEXT");

            Button btnNext = new Button();
            btnNext.setMnemonicParsing(true);
            btnNext.setText("NEXT -->");
            btnNext.setStyle("-fx-text-fill: black");

            Font fontBtnNext = Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 17);
            btnNext.setFont(fontBtnNext);

            btnNext.setOnAction(new EventHandler<ActionEvent>() {

                @Override
                public void handle(ActionEvent arg0) {
                    // Only open Window Loading this is another Thread
                    final double HERTZ = 30.d;
                    final double TIME_BETWEEN_UPDATES = 1000000000 / HERTZ;
                    final int MAX_UPDATES_BEFORE_RENDER = 5;
                    // update Time AND RENDER TIME
                    double lastUpdateTime = System.nanoTime();
                    double lastRenderTime = System.nanoTime();

                    final double TARGET_FPS = 60;
                    final double TARGET_TIME_BETWEEN_RENDERS = 1000000000 / TARGET_FPS;

                    while (running) {

                        double now = System.nanoTime();
                        int updateCount = 0;

                        if (!paused) {
                            while (now - lastUpdateTime > TIME_BETWEEN_UPDATES
                                    && updateCount < MAX_UPDATES_BEFORE_RENDER) {
                                lastUpdateTime += TIME_BETWEEN_UPDATES;
                                updateCount++;
                            }

                            if (now - lastRenderTime > TIME_BETWEEN_UPDATES) {
                                lastUpdateTime = now - TIME_BETWEEN_UPDATES;
                            }

                            lastRenderTime = now;
                            int thisSecond = (int) (lastUpdateTime / 1000000000);
                            // Simple way of finding FPS.
                            int lastSecondTime = (int) (lastUpdateTime / 1000000000);

                            if (thisSecond > lastSecondTime) {
                                System.out.println("SECOND: " + thisSecond + " " + frameCount);
                                fps = frameCount;
                                frameCount = 0;
                                lastSecondTime = thisSecond;
                            }

                            while (now - lastRenderTime < TARGET_TIME_BETWEEN_RENDERS
                                    && now - lastUpdateTime < TIME_BETWEEN_UPDATES) {
                                Thread.yield();

                                try {
                                    Thread.sleep(1);
                                } catch (Exception e) {
                                }

                                now = System.nanoTime();
                            }
                            frameCount++;
                        }
                    }
                    System.out.println("FPS: " + fps);

                    int randDom = (int) (randApplication.nextInt(10000)
                            + (Math.tan(100) / Math.sin(589)) / Math.sinh(100));

                    try {

                        Thread.sleep(randDom);

                        System.out.println(randDom);
                        btnNext.disableProperty();
                        primaryStage.close();

                        if (canProceed) {
                            new Loading().setVisible(true);
                        }
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });

            btnNext.setTooltip(tipTextBtn);
            btnNext.setMaxWidth(150);
            btnNext.setMaxHeight(70);

            StackPane r = new StackPane();

            r.getChildren().add(btnNext);

            // HBox hBox = new HBox(btnNext);

            // sceneBtn = new Scene(hBox);

            sceneBtn = new Scene(r);

            primaryStage.setScene(scene);
            primaryStage.setScene(sceneBtn);
            primaryStage.setAlwaysOnTop(true);
            primaryStage.setMaximized(true);
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
